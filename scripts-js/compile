#! /usr/bin/env node
// Generated by CoffeeScript 1.10.0
(function() {
  var EXECUTABLES_DIR, PROGRAMS, assert, aux, e, err, error1, exec, ext, fs, hasLaterModificationTime, i, len, path, program, ref, shouldCompile;

  assert = require('assert');

  path = require('path');

  fs = require('fs');

  e = require('child_process').execSync;

  ref = require('./common'), PROGRAMS = ref.PROGRAMS, EXECUTABLES_DIR = ref.EXECUTABLES_DIR;

  process.argv = process.argv.slice(2);

  hasLaterModificationTime = (function(_this) {
    return function(that, other) {
      var otherDate, ref1, thatDate;
      ref1 = [that, other].map(fs.lstatSync), that = ref1[0], other = ref1[1];
      thatDate = new Date(that.mtime);
      otherDate = new Date(other.mtime);
      return thatDate.getTime() > otherDate.getTime();
    };
  })(this);

  shouldCompile = function(program, exec) {
    var error, error1, file, i, len, source, sources;
    try {
      fs.lstatSync(exec);
    } catch (error1) {
      error = error1;
      if (error.code === 'ENOENT') {
        return true;
      } else {
        throw error;
      }
    }
    sources = (function() {
      var i, len, ref1, results;
      ref1 = fs.readdirSync(program.path);
      results = [];
      for (i = 0, len = ref1.length; i < len; i++) {
        file = ref1[i];
        if (path.extname(file) === ".c") {
          results.push(file);
        }
      }
      return results;
    })();
    for (i = 0, len = sources.length; i < len; i++) {
      source = sources[i];
      if (hasLaterModificationTime(path.join(program.path, source), exec)) {
        return true;
      }
    }
    return false;
  };

  switch (process.argv[0]) {
    case "check":
    case "speedup":
      process.env.CC_FLAGS = "-O3 -march=native";
      ext = ".3";
      break;
    case "profile":
      process.env.CC_FLAGS = "-O3 -march=native -g -static";
      ext = ".3gs";
      break;
    case "debug":
    case "assembly":
      process.env.CC_FLAGS = "-O3 -march=native -g";
      ext = ".3g";
      break;
    case "profile_gprof":
      process.env.CC_FLAGS = "-O3 -march=native -g -static -pg";
      ext = ".3gspg";
      break;
    default:
      assert(false);
  }

  aux = process.cwd();

  for (i = 0, len = PROGRAMS.length; i < len; i++) {
    program = PROGRAMS[i];
    if (shouldCompile(program, (exec = program.name.indexOf('original') >= 0 ? EXECUTABLES_DIR + "/ftdock" + ext : EXECUTABLES_DIR + "/ftdock-opt" + program.name + ext))) {
      try {
        console.log('\x1b[35m', "Compiling", '\x1b[0m', "" + program.name);
        process.chdir(program.path);
        e("make");
        process.chdir(aux);
        e("cp " + program.path + "/ftdock " + exec);
        process.chdir(program.path);
        e("make clean");
        process.chdir(aux);
      } catch (error1) {
        err = error1;
        process.exit(1);
      }
    }
  }

}).call(this);
